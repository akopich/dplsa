/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


package topicmodeling.regulaizers

/**
 * Defines a prior distribution (possibly, improper) on \Theta matrix row (a document over topics)
 */
trait DocumentOverTopicDistributionRegularizer extends Serializable with MatrixInPlaceModification {
    /**
     *
     * @param theta a distribution of a document over topics
     * @return the log of prior probability. Is used only for correct perplexity calculation
     */
    def apply(theta: Array[Float]): Float

    /**
     * This implementation performs positive cut for every value of theta
     * @param thetaCnt -- the number of words in a document generated by every topic (n_{dt}
     *                 counter in Vorontsov's notation)
     * @param oldTheta -- a distribution of the document over topics obtained in the previous
     *                 iterations
     */
    def regularize(thetaCnt: Array[Float], oldTheta: Array[Float]): Unit =
        shift(thetaCnt, (x, i) => x(i) = math.max(0, x(i)))
}
